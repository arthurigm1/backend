// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Empresa {
  id        String   @id @default(cuid())
  nome      String
  cnpj      String   @unique
  criadoEm  DateTime @default(now())
  usuarios  Usuario[]
  lojas     Loja[]
}

model Usuario {
  id                     String        @id @default(uuid())
  nome                   String
  email                  String        @unique
  senha                  String
  cpf                    String?       @unique
  telefone               String?
  tipo                   TipoUsuario
  empresaId              String
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  empresa                Empresa       @relation(fields: [empresaId], references: [id])
  contratos              Contrato[]
  pagamentos             Pagamento[]
  notificacoes           Notificacao[]
  criadoEm               DateTime      @default(now())
}

model Loja {
  id           String      @id @default(uuid())
  nome         String
  numero       String
  metragem     Float
  localizacao  String
  status       StatusLoja
  empresaId    String
  empresa      Empresa     @relation(fields: [empresaId], references: [id])
  contratos    Contrato[]
  criadoEm     DateTime    @default(now())
}

model Contrato {
  id              String     @id @default(uuid())
  lojaId          String
  inquilinoId     String
  valorAluguel    Float
  dataInicio      DateTime
  dataFim         DateTime
  reajusteAnual   Boolean
  ativo           Boolean    @default(true)
  loja            Loja       @relation(fields: [lojaId], references: [id])
  inquilino       Usuario    @relation(fields: [inquilinoId], references: [id])
  pagamentos      Pagamento[]
  criadoEm        DateTime   @default(now())
}

model Pagamento {
  id           String    @id @default(uuid())
  contratoId   String
  usuarioId    String
  valor        Float
  dataVenc     DateTime
  dataPag      DateTime?
  status       StatusPagamento
  contrato     Contrato  @relation(fields: [contratoId], references: [id])
  usuario      Usuario   @relation(fields: [usuarioId], references: [id])
  criadoEm     DateTime  @default(now())
}

model Notificacao {
  id          String            @id @default(uuid())
  usuarioId   String
  mensagem    String
  tipo        TipoNotificacao   @default(GERAL)
  lida        Boolean           @default(false)
  enviadaEm   DateTime          @default(now())
  usuario     Usuario           @relation(fields: [usuarioId], references: [id])
}

enum TipoUsuario {
  ADMIN_EMPRESA    // Usu치rio principal da empresa que pode criar outros usu치rios
  FUNCIONARIO      // Funcion치rio da empresa
  INQUILINO        // Inquilino (pode ser criado por usu치rios da empresa)
  VISITANTE
}

enum StatusLoja {
  VAGA
  OCUPADA
  INATIVA
}

enum StatusPagamento {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}

enum TipoNotificacao {
  PAGAMENTO_VENCIDO
  PAGAMENTO_PROXIMO_VENCIMENTO
  PAGAMENTO_REALIZADO
  CONTRATO_VENCIMENTO
  GERAL
}

