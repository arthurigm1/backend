generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:RDIYuQCEKRggRxUkFazSoCAvDwdVBkQl@hopper.proxy.rlwy.net:12237/railway"
}


model Empresa {
  id       String    @id @default(cuid())
  nome     String
  cnpj     String    @unique
  criadoEm DateTime  @default(now())
  lojas    Loja[]
  usuarios Usuario[]
}

model Usuario {
  id                   String        @id @default(uuid())
  nome                 String
  email                String        @unique
  senha                String
  cpf                  String?       @unique
  telefone             String?
  tipo                 TipoUsuario
  empresaId            String
  criadoEm             DateTime      @default(now())
  resetPasswordExpires DateTime?
  resetPasswordToken   String?
  contratos            Contrato[]
  lojas                Loja[]
  notificacoes         Notificacao[]
  empresa              Empresa       @relation(fields: [empresaId], references: [id])
}

model Loja {
  id          String     @id @default(uuid())
  nome        String
  numero      String
  localizacao String
  status      StatusLoja
  empresaId   String
  usuarioId   String?
  criadoEm    DateTime   @default(now())
  contratos   Contrato[]
  usuario     Usuario?   @relation(fields: [usuarioId], references: [id])
  empresa     Empresa    @relation(fields: [empresaId], references: [id])
}

model Contrato {
  id                 String         @id @default(uuid())
  lojaId             String
  inquilinoId        String
  valorAluguel       Float
  dataInicio         DateTime
  dataFim            DateTime
  dataVencimento     Int            @default(5)
  reajusteAnual      Boolean        @default(false)
  percentualReajuste Float?
  clausulas          String?
  observacoes        String?
  status             StatusContrato @default(ATIVO)
  ativo              Boolean        @default(true)
  criadoEm           DateTime       @default(now())
  atualizadoEm       DateTime       @updatedAt
  inquilino          Usuario        @relation(fields: [inquilinoId], references: [id])
  loja               Loja           @relation(fields: [lojaId], references: [id])
  faturas            Fatura[]
}

model Fatura {
  id             String       @id @default(uuid())
  contratoId     String
  mesReferencia  Int
  anoReferencia  Int
  valorAluguel   Float
  dataVencimento DateTime
  dataGeracao    DateTime     @default(now())
  status         StatusFatura @default(PENDENTE)
  efiCobrancaId  String?      @unique
  criadoEm       DateTime     @default(now())
  atualizadoEm   DateTime     @updatedAt
  contrato       Contrato     @relation(fields: [contratoId], references: [id])
  efiCobranca    EFICobranca? @relation(fields: [efiCobrancaId], references: [id])

  @@unique([contratoId, mesReferencia, anoReferencia])
}

model Notificacao {
  id        String          @id @default(uuid())
  usuarioId String
  mensagem  String
  tipo      TipoNotificacao @default(GERAL)
  lida      Boolean         @default(false)
  enviadaEm DateTime        @default(now())
  usuario   Usuario         @relation(fields: [usuarioId], references: [id])
}

model EFICobranca {
  id             String    @id @default(uuid())
  chargeId       Int?
  barcode        String?
  pixQrcode      String?
  pixQrcodeImage String?
  link           String?
  billetLink     String?
  pdfLink        String?
  expireAt       DateTime?
  status         String?
  total          Int?
  payment        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  fatura         Fatura?
}

enum TipoUsuario {
  ADMIN_EMPRESA
  FUNCIONARIO
  INQUILINO
  VISITANTE
}

enum StatusLoja {
  VAGA
  OCUPADA
  INATIVA
}

enum TipoNotificacao {
  PAGAMENTO_VENCIDO
  PAGAMENTO_PROXIMO_VENCIMENTO
  PAGAMENTO_REALIZADO
  CONTRATO_VENCIMENTO
  GERAL
}

enum StatusContrato {
  ATIVO
  VENCIDO
  RESCINDIDO
  SUSPENSO
}

enum StatusFatura {
  PENDENTE
  PAGA
  VENCIDA
  CANCELADA
}
